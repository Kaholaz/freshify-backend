openapi: 3.0.4
info:
  title: Freshify API Documentation
  description: |-
    An API for creating and managing a household inventory and shopping list.
    The API is written in Java using the Spring Boot framework. The API uses a
    MySQL database. The API is documented using Swagger. The API is hosted using
    Apache.
    Some useful links:
    - [The GitLab repository](https://gitlab.stud.idi.ntnu.no/idatt2106-v23-10/smartmat-backend)
  contact:
    email: vkbugge@hotmail.com
  license:
    name: MIT License
    url: "https://opensource.org/licenses/MIT"
  version: 2.1.1
servers:
  - url: http://localhost:8080
tags:
  - name: account
    description: Operations about account
  - name: household
    description: Operations about household
  - name: inventory
    description: Operations about inventory
  - name: shopping list
    description: Operations about shopping list
paths:
  /user:
    get:
      tags:
        - account
      summary: Get user by email
      description: Returns a single user by email
      operationId: getUserByEmail
      parameters:
        - name: email
          in: query
          description: Email of user to return
          required: true
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  userId:
                    type: integer
                    format: int64
        "400":
          description: No email provided
        "404":
          description: User not found
    post:
      tags:
        - account
      summary: Create a user
      description: Creates a user
      operationId: createUser
      requestBody:
        description: The user to be created
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateUser"
      responses:
        "201":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserFull"
        "409":
          description: User already exists
    put:
      tags:
        - account
      summary: Update user
      description: Updates a user
      operationId: updateUser
      requestBody:
        description: The user to be updated
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateUser"
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserFull"
        "404":
          description: User not found
  /user/loggedin:
    get:
      tags:
        - account
      summary: Get the user details from the jwt token cookie
      description: Returns the details of the logged in user, the details are extracted from the jwt token cookie.
      operationId: getLoggedInUser
      responses:
        "200":
          description: Returns the details of the logged in user
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserFull"
        "404":
          description: User not found
  /user/{id}:
    get:
      tags:
        - account
      summary: Get user by id
      description: Returns a single user
      operationId: getUserById
      parameters:
        - name: id
          in: path
          description: ID of user to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserFull"
        "404":
          description: User not found
    delete:
      tags:
        - account
      summary: Delete user
      description: Deletes a user
      operationId: deleteUser
      parameters:
        - name: id
          in: path
          description: ID of user to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "204":
          description: successful operation
        "401":
          description: Access denied
        "404":
          description: User not found
  /user/{id}/households:
    get:
      tags:
        - household
        - account
      summary: Get a user's households
      description: Gets a list of households of a given user
      operationId: getHouseholds
      parameters:
        - name: id
          in: path
          description: ID of user to get households from
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Household"
        "401":
          description: Access denied
        "404":
          description: User not found
  /user/login:
    post:
      tags:
        - account
      summary: Login user
      description: Logs in a user
      operationId: loginUser
      requestBody:
        description: The user to be logged in
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginUser"
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserFull"
        "401":
          description: User could not be logged in
  /user/logout:
    post:
      tags:
        - account
      summary: Logout user
      description: Logs out a user
      operationId: logoutUser
      responses:
        "200":
          description: successful operation
        "401":
          description: User could not be logged out
  /household:
    post:
      tags:
        - household
      summary: Create a household
      description: Creates a household
      operationId: createHousehold
      requestBody:
        description: The household to be created
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateHousehold"
      responses:
        "201":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Household"
  /household/{id}/users:
    get:
      tags:
        - household
      summary: Get household users
      description: Gets all the users that are member of a household
      operationId: getUsers
      parameters:
        - name: id
          in: path
          description: ID of household to get users from
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      $ref: "#/components/schemas/HouseholdMemberKey"
                    user:
                      $ref: "#/components/schemas/UserFull"
                    userType:
                      $ref: "#/components/schemas/HouseholdUserType"
        "401":
          description: Access denied
        "404":
          description: Household not found
    put:
      tags:
        - household
      summary: Update household member role of user
      description: Updates the role of a user withing a given household. Can only be done by a superuser
      operationId: updateHouseholdMemberRole
      parameters:
        - name: id
          in: path
          description: ID of household to update a user type in
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Updated the type of user in the household
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateHouseholdUserType"
      responses:
        "200":
          description: The updated household member
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HouseholdMember"
        "400":
          description: Illegal household member role/User does not belong to household
        "401":
          description: Access denied
        "404":
          description: Household not found/user not found
    post:
      tags:
        - household
      summary: Add user
      description: Adds a user to the household. Can only be done by a superuser
      operationId: addUser
      parameters:
        - name: id
          in: path
          description: ID of household to add a user to
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: User to add to the household
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: integer
                  format: int64
      responses:
        "201":
          description: successful operation
        "409":
          description: User already exists in the household
        "401":
          description: Access denied
        "404":
          description: Household not found
  /household/{id}/users/{userId}:
    delete:
      tags:
        - household
      summary: Remove a user from a household
      description: Removes a user from a household. Can only be done by a superuser or the user themselves
      operationId: removeUserFromHousehold
      parameters:
        - name: id
          in: path
          description: ID of household to delete a user from
          required: true
          schema:
            type: integer
            format: int64
        - name: userId
          in: path
          description: ID of user to delete from the household
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "204":
          description: successful operation
        "404":
          description: User not found/Household not found/User does not belong to household
        "401":
          description: Access denied
  /household/{id}/inventory/waste:
    get:
      tags:
        - household
        - inventory
      summary: Returns a list of household waste
      description: Returns lists of household waste sorted by number of items wasted and percentage of items wasted. The lists are sorted in descending order.
      parameters:
        - name: id
          in: path
          description: ID of household to get waste from
          required: true
          schema:
            type: integer
            format: int64
        - name: limit
          in: query
          description: The number of items to return (maximum 50)
          schema:
            type: integer
            maximum: 50
        - name: start_date
          in: query
          description: Start date for the time interval (YYYY-MM-DD)
          required: false
          schema:
            type: string
        - name: end_date
          in: query
          description: End date for the time interval (YYYY-MM-DD)
          required: false
          schema:
            type: string  
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WasteSortedListsResponse"
        "404":
          description: Household not found
  /household/{id}:
    delete:
      tags:
        - household
      summary: Delete a household
      description: Deletes a household. Can only be done by superusers.
      operationId: deleteHousehold
      parameters:
        - name: id
          in: path
          description: ID of household to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "204":
          description: successful operation
        "404":
          description: Household not found
        "401":
          description: Access denied
    get:
      tags:
        - household
      summary: Get household by id
      description: Returns a single household
      operationId: getHouseholdById
      parameters:
        - name: id
          in: path
          description: ID of household to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Household"
        "404":
          description: Household not found
    put:
      tags:
        - household
      summary: Update household
      description: Updates the household's attributes. Can only be done by a superuser
      operationId: updateHousehold
      parameters:
        - name: id
          in: path
          description: ID of household to update
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: The household to be updated
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Household"
      responses:
        "200":
          description: successful operation
        "404":
          description: Household not found
        "401":
          description: Access denied
  /household/{id}/shoppinglist:
    get:
      tags:
        - shopping list
      summary: Get the shopping list of a household
      description: Gets a shopping list with item id from shopping list
      operationId: getShoppingList
      parameters:
        - name: id
          in: path
          description: ID of household's shopping list to get items from
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: household ShoppingList items
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ShoppingListEntry"
        "401":
          description: Unauthorized
        "404":
          description: Household not found
    post:
      tags:
        - shopping list
      summary: Add item to shopping list
      description: Adds a selected item to shopping list, user has to be validated. Both ItemType id and amount should be sent in request body.
      parameters:
        - name: id
          in: path
          description: ID of household's shopping list to add items to
          required: true
          schema:
            type: integer
            format: int64
      operationId: addItem
      requestBody:
        description: Item to be added to shopping list
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateShoppingListEntry"
      responses:
        "201":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ShoppingListEntry"
        "401":
          description: Unauthorized response
        "409":
          description: Item already exists in shopping list
        "404":
          description: Item type or household does not exist
    put:
      tags:
        - shopping list
      summary: Update shopping list entry
      description: Updates an entry in the shopping list of a household
      operationId: updateShoppingListEntry
      parameters:
        - name: id
          in: path
          description: ID of household's shopping list to mark items as bought
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: ItemType and count to change in shopping list
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateShoppingListEntry"
      responses:
        "204":
          description: Successful operation
        "400":
          description: Invalid operation. More items are removed than in shopping list.
        "401":
          description: Unauthorized response, user is not validated or does not have access
        "404":
          description: Shopping list entry not found
  /household/{id}/shoppinglist/{listEntryId}:
    delete:
      tags:
        - shopping list
      summary: Delete item from shopping list
      description: Delete an item from shopping list of a household, both ItemType and count of the item should be passed
      operationId: deleteShoppingListEntry
      parameters:
        - name: id
          in: path
          description: ID of household's shopping list to delete items from
          required: true
          schema:
            type: integer
            format: int64
        - name: listEntryId
          in: path
          description: ID of shopping list entry to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "204":
          description: Successful operation
        "404":
          description: Shopping list or shopping list entry not found.
        "401":
          description: Unauthorized response, user is not validated or does not have access
  /household/{id}/shoppinglist/buy:
    post:
      tags:
        - shopping list
      summary: Mark items as bought
      description: Mark items as bought. Items are removed from shopping list.
      operationId: markItemsAsBought
      parameters:
        - name: id
          in: path
          description: ID of household's shopping list to mark items as bought
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: Successful operation
        "400":
          description: Invalid operation. More items are removed than in shopping list.
        "401":
          description: Unauthorized response, user is not validated or does not have access
        "404":
          description: Item not found in shopping list
  /household/{id}/inventory:
    post:
      tags:
        - inventory
      summary: Add item to inventory
      description: Takes a list of entries, each entry contains an item type id and count. This way multiple items can be added.
      operationId: addInventoryItem
      parameters:
        - name: id
          in: path
          description: ID of the household to add items to.
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: List of items to be added to inventory
        content:
          application/json:
            schema:
              type: array
              items:
                type: object
                properties:
                  itemTypeId:
                    type: integer
                    format: int64
                  count:
                    type: integer
                    format: int64
      responses:
        "201":
          description: Returns a list of the newly added items.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InventoryItems"
        "401":
          description: Unauthorized response, user is not validated or does not have access
        "404":
          description: Household not found/User not found/Item type not found
    get:
      tags:
        - inventory
      summary: Gets all items from inventory
      description: Gets all items of a specific inventory
      operationId: getInventoryItems
      parameters:
        - name: id
          in: path
          description: ID of household's shopping list to get items from
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: item found
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Item"
        "401":
          description: Unauthorized
        "404":
          description: Household not found
    put:
      tags:
        - inventory
      summary: Alters an item in inventory
      description: Alters an item in inventory. Either the state or the remaining amount can be changed.
      operationId: updateInventoryItem
      parameters:
        - name: id
          in: path
          description: ID of household's inventory to update the item in
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: The item to be updated
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateItem"
      responses:
        "200":
          description: Successful operation
        "400":
          description: The given item status is not a valid status for item/item does not belong to household
        "401":
          description: Unauthorized response, user is not validated or does not have access
        "404":
          description: Item not found/household not found
  /household/{id}/inventory/{itemId}:
    delete:
      tags:
        - inventory
      summary: Delete item from inventory
      description: Delete an item from inventory of a household.
      operationId: deleteInventoryItem
      parameters:
        - name: id
          in: path
          description: ID of household's inventory to delete the item from
          required: true
          schema:
            type: integer
            format: int64
        - name: itemId
          in: path
          description: ID of item to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: Successful operation
        "401":
          description: Unauthorized response, user is not validated or does not have access
        "404":
          description: Item not found/household not found
  /household/{id}/inventory/suggest:
    post:
      tags:
        - inventory
      summary: Add suggestion to inventory
      description: Takes a list of entries, each entry contains an item type id and count. These item types are added as suggestions to the inventory.
      operationId: addInventorySuggestion
      parameters:
        - name: id
          in: path
          description: ID of the household to add items to.
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: List of suggestions to be added to inventory
        content:
          application/json:
            schema:
              type: array
              items:
                type: object
                properties:
                  itemTypeId:
                    type: integer
                    format: int64
                  count:
                    type: integer
                    format: int64
      responses:
        "201":
          description: Returns a list of the newly added suggestions.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InventoryItems"
        "401":
          description: Unauthorized response, user is not validated or does not have access
        "404":
          description: Household not found/User not found/Item type not found
  /itemtype:
    get:
      tags:
        - item type
      summary: Search through item types
      operationId: searchItemTypes
      parameters:
        - name: name
          in: query
          description: Search string to find item types by name
          required: true
          schema:
            type: string
      responses:
        200:
          description: All ItemTypes that match the search string
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ItemType"
        404:
          description: No item types found
  /recipes/{householdId}:
    get:
      tags:
        - recipes
      summary: Gets a page of recipes that can also be filtered
      description: Retrieves a paginated list of recipes that can optionally be filtered by recipe category and/or allergens. For each ingredient in the recipe, it checks whether the household has the specified ingredient item type in the fridge.
      operationId: getRecipesPaginated
      parameters:
        - name: householdId
          in: path
          description: ID of the household to check for ingredients
          required: true
          schema:
            type: integer
            format: int64
        - name: categoryId
          in: query
          description: ID of the recipe category to filter by
          required: false
          schema:
            type: integer
            format: int64
        - name: allergenIds
          in: query
          description: Array of IDs of the allergens to filter by
          required: false
          schema:
            type: array
            items:
              type: integer
              format: int64
        - name: pageNo
          in: query
          description: Page number to retrieve
          required: false
          schema:
            type: integer
            format: int32
            default: 0
        - name: pageSize
          in: query
          description: Number of recipes per page
          required: false
          schema:
            type: integer
            format: int32
            default: 10
      responses:
        "200":
          description: A page of recipes were sucessfully retrieved
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RecipeDTOPage"
        "404":
          description: The specified household or recipe category was not found
  /recipes/{householdId}/recipe/{id}:
    get:
      tags:
        - recipes
      summary: Gets a recipe by ID
      description: Retrieves the recipe with the specified ID and each ingredient is also checked against the specified household's fridge.
      operationId: getRecipeById
      parameters:
        - name: householdId
          in: path
          description: ID of the household to check for ingredients
          required: true
          schema:
            type: integer
            format: int64
        - name: id
          in: path
          description: ID of the recipe to retrieve
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: Success - the requested recipe was found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RecipeDTO"
        "404":
          description: The specified recipe or household was not found
  /recipes:
    post:
      tags:
        - recipes
      summary: Create a new recipe
      description: Creates a new recipe and saves to backend.
      operationId: createRecipe
      requestBody:
        description: Recipe object to be created and saved.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RecipeRequest'
      responses:
        '200':
          description: The newly created recipe.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RecipeDTO'
        '404':
          description: Item type not found/Recipe category not found/Allergen not found
  /householdrecipe/{householdId}/recipe/{id}:
    delete:
        tags:
          - household recipe
        summary: Removes a recipe from a household
        description: Removes a recipe from a household. It will no longer be bookmarked in that household.
        operationId: deleteHouseholdRecipe
        parameters:
            - name: householdId
              in: path
              description: ID of the household to add the recipe to
              required: true
              schema:
                type: integer
                format: int64
            - name: id
              in: path
              description: ID of the recipe to add
              required: true
              schema:
                type: integer
                format: int64
        responses:
            "204":
              description: Success - the recipe was removed from the household
            "404":
              description: The specified recipe or household was not found
    post:
        tags:
          - household recipe
        summary: Adds a recipe to a household
        description: Adds a recipe as bookmarked to the given household.
        operationId: createHouseholdRecipe
        parameters:
          - name: householdId
            in: path
            description: ID of the household to add the recipe to
            required: true
            schema:
              type: integer
              format: int64
          - name: id
            in: path
            description: ID of the recipe to add
            required: true
            schema:
              type: integer
              format: int64
        responses:
          "201":
            description: Success - the recipe was added to household
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/HouseholdRecipeDTO"
          "404":
            description: The specified recipe or household was not found
  /householdrecipe/{householdId}/recipe:
    get:
        tags:
          - household recipe
        summary: Gets all the recipes added/bookmarked to a household
        description: Gets a list of all the households that have been added/bookmarked to a given household
        operationId: getHouseholdRecipes
        parameters:
          - name: householdId
            in: path
            description: ID of the household to check for ingredients
            required: true
            schema:
              type: integer
              format: int64
        responses:
          "200":
            description: Operation successfull
            content:
              application/json:
                schema:
                  type: array
                  items:
                    $ref: "#/components/schemas/HouseholdRecipeDTO"
          "404":
            description: The specified household was not found
  /recipecategory:
    get:
      tags:
        - recipe category
      summary: Get all recipe categories
      description: Returns a list of recipe categories containing all recipe categories from database
      operationId: getAllRecipeCategories
      responses:
        200:
          description: A list of all recipe categories
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/RecipeCategory"
  /allergens:
    get:
      tags:
        - allergen
      summary: Get all allergens
      description: Returns a list of allergens containing all allergens from database
      operationId: getAllergens
      responses:
        200:
          description: A list of all allergens
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/AllergenRequest"
components:
  schemas:
    CreateUser:
      type: object
      properties:
        email:
          type: string
          format: email
          example: jens@gmail.com
        password:
          type: string
          format: password
          example: password123
        firstName:
          type: string
          example: John
    LoginUser:
      type: object
      properties:
        email:
          type: string
          format: email
          example: lennon@gmail.com
        password:
          type: string
          format: password
          example: hunter2
    UpdateUser:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        email:
          type: string
          format: email
          example: jens@gmail.com
        password:
          type: string
          format: password
          example: password123
        firstName:
          type: string
          example: John
    UserFull:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        email:
          type: string
          format: email
          example: example@example.org
        firstName:
          type: string
          example: John
    ItemType:
      type: object
      properties:
        id:
          type: integer
          example: 123
        name:
          type: string
          example: "Milk"
    CreateShoppingListEntry:
      type: object
      properties:
        itemTypeId:
          type: integer
          example: 123
        count:
          type: integer
          format: int32
          example: 1
        suggested:
          type: boolean
    UpdateShoppingListEntry:
      type: object
      properties:
        id:
          type: integer
          example: 123
        count:
          type: integer
          format: int32
          example: 1
        suggested:
          type: boolean
        checked:
          type: boolean
    ShoppingListEntry:
      type: object
      properties:
        id:
          type: integer
          example: 123
        count:
          type: integer
          format: int32
          example: 1
        type:
          $ref: "#/components/schemas/ItemType"
        suggested:
          type: boolean
        checked:
          example: false
          type: boolean
        addedBy:
          $ref: "#/components/schemas/UserFull"
    ItemState:
      type: string
      enum:
        - INVENTORY
        - USED
    UpdateItem:
      type: object
      properties:
        itemId:
          type: integer
          format: int64
        remaining:
          description: The proportion of the item that was wasted
          type: number
          format: double
          example: 0.5
        state:
          description: The state of the item
          $ref: "#/components/schemas/ItemState"
    Item:
      type: object
      properties:
        id:
          type: integer
          example: 123
        state:
          $ref: "#/components/schemas/ItemState"
        remaining:
          type: number
          format: double
          example: 0.5
        bought:
          type: string
          format: date
          example: "2020-01-01"
        lastChanged:
          type: string
          format: date
          example: "2020-01-01"
        suggested:
          type: boolean
        type:
          $ref: "#/components/schemas/ItemType"
        addedBy:
          $ref: "#/components/schemas/UserFull"
    InventoryItems:
      type: array
      items:
        properties:
          id:
            type: integer
            example: 123
          state:
            $ref: "#/components/schemas/ItemState"
          remaining:
            type: number
            format: double
            example: 1
          lastChanged:
            type: string
            format: date
            example: "2020-01-01"
          bought:
            type: string
            format: date
            example: "2020-01-01"
          suggested:
            type: boolean
          type:
            $ref: "#/components/schemas/ItemType"
          addedBy:
            $ref: "#/components/schemas/UserFull"
    HouseholdUserType:
      type: string
      enum:
        - SUPERUSER
        - USER
    UpdateHouseholdUserType:
      type: object
      properties:
        userId:
          type: integer
          example: 123
        type:
          $ref: "#/components/schemas/HouseholdUserType"
    WasteSortedListsResponse:
      type: object
      properties:
        wastedItemsByCount:
          type: array
          items:
            $ref: "#/components/schemas/WastedItemDTO"
        wastedItemsByAverageAmount:
          type: array
          items:
            $ref: "#/components/schemas/WastedItemDTO"
    WastedItemDTO:
      type: object
      properties:
        itemType:
          $ref: "#/components/schemas/ItemType"
        amountWasted:
          type: number
          example: 3
    HouseholdMemberKey:
      type: object
      properties:
        householdId:
          type: integer
          example: 1
        userId:
          type: integer
          example: 1
    HouseholdMember:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/HouseholdMemberKey"
        user:
          $ref: "#/components/schemas/UserFull"
        type:
          $ref: "#/components/schemas/HouseholdUserType"
    Household:
      type: object
      properties:
        id:
          type: integer
          example: 123
        name:
          type: string
          example: "My family"
    CreateHousehold:
      type: object
      properties:
        name:
          type: string
          example: "My family"
    RecipeRequest:
      type: object
      properties:
        name:
          type: string
          example: "Spaghetti Bolognese"
        description:
          type: string
          example: "Italian dish made with ground beef and tomatoes"
        steps:
          type: string
          example: "1. Cook spaghetti by package instructions. 2. Brown ground beef in a large pan. 3. Add tomatoes. 4. Simmer for 20 minutes."
        estimatedTime:
          type: integer
          format: int64
          example: 30
        recipeIngredients:
          type: array
          items:
            $ref: '#/components/schemas/RecipeIngredientRequest'
          example: [{ "itemType": { "id": 1, "name": "Ground Beef" }, "amount": 1.5, "unit": "kg" }, { "itemType": { "id": 2, "name": "Tomatoes" }, "amount": 1, "unit": "can"}]
        categories:
          type: array
          items:
            $ref: '#/components/schemas/RecipeCategory'
          example: [{ "id": 1, "name": "Italian" }, { "id": 2, "name": "Meat Dish" }]
        allergens:
          type: array
          items:
            $ref: '#/components/schemas/AllergenRequest'
          example: [ { "id": 1, "name": "Gluten" }, { "id": 2, "name": "Lactose" } ]
        image:
          type: string
          example: "https://images.matprat.no/nten4ykzxh-jumbotron/large/pastacarbonara0904_1.jpg"
    RecipeIngredientRequest:
      type: object
      properties:
        itemType:
          $ref: '#/components/schemas/ItemType'
        amount:
          type: number
          format: double
          example: 1.5
        unit:
          type: string
          example: "pounds"
    ItemTypeDTO:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: "Ground Beef"
    Recipe:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: "Spaghetti Bolognese"
        description:
          type: string
          example: "Classic Italian dish made with ground beef, tomatoes, and herbs"
        estimatedTime:
          type: integer
          format: int64
          example: 30
        steps:
          type: string
          example: "1. Cook spaghetti according to package instructions. 2. Brown ground beef in a large pan. 3. Add tomatoes, herbs, and seasoning. 4. Simmer for 20 minutes. 5. Serve over cooked spaghetti."
        recipeIngredients:
          type: array
          items:
            $ref: '#/components/schemas/RecipeIngredient'
          example: [{ "id": 1, "itemType": { "id": 1, "name": "Ground Beef" }, "amount": 1.5, "unit": "pounds" }]
        categories:
          type: array
          items:
            $ref: '#/components/schemas/RecipeCategory'
          example: [{ "id": 1, "name": "Italian" }]
        allergens:
          type: array
          items:
            $ref: '#/components/schemas/AllergenRequest'
          example: [ { "id": 1, "name": "Gluten" }, { "id": 2, "name": "Lactose" } ]
        image:
          type: string
          example: "https://images.matprat.no/nten4ykzxh-jumbotron/large/pastacarbonara0904_1.jpg"
    RecipeIngredient:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        itemType:
          $ref: '#/components/schemas/ItemType'
        amount:
          type: number
          format: double
          example: 1.5
        unit:
          type: string
          example: "pounds"
    AllergenRequest:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: "Lactose"
    RecipeCategory:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: "Italian"
    RecipeDTOPage:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: "#/components/schemas/RecipeDTO"
        pageable:
          type: object
          properties:
            sort:
              type: object
              properties:
                empty:
                  type: boolean
                sorted:
                  type: boolean
                unsorted:
                  type: boolean
            offset:
              type: integer
              format: int64
            pageSize:
              type: integer
              format: int32
            pageNumber:
              type: integer
              format: int32
            paged:
              type: boolean
            unpaged:
              type: boolean
        last:
          type: boolean
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int32
        size:
          type: integer
          format: int32
        number:
          type: integer
          format: int32
        sort:
          type: object
          properties:
            empty:
              type: boolean
            sorted:
              type: boolean
            unsorted:
              type: boolean
        first:
          type: boolean
        numberOfElements:
          type: integer
          format: int32
        empty:
          type: boolean
    RecipeDTO:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: "Spaghetti Bolognese"
        description:
          type: string
          example: "Classic Italian dish made with ground beef, tomatoes, and herbs"
        estimatedTime:
          type: integer
          format: int64
          example: 30
        steps:
          type: string
          example: "1. Cook spaghetti according to package instructions. 2. Brown ground beef in a large pan. 3. Add tomatoes, herbs, and seasoning. 4. Simmer for 20 minutes. 5. Serve over cooked spaghetti."
        totalIngredientsInFridge:
          type: integer
          format: int32
          example: 3
        recipeIngredients:
          type: array
          items:
            $ref: '#/components/schemas/RecipeIngredientResponse'
          example: [ { "id": 1, "itemType": { "id": 1, "name": "Ground Beef" }, "amount": 1.5, "unit": "pounds", "householdHasIngredient": true } ]
        categories:
          type: array
          items:
            $ref: '#/components/schemas/RecipeCategory'
          example: [ { "id": 1, "name": "Italian" } ]
        allergens:
          type: array
          items:
            $ref: '#/components/schemas/AllergenRequest'
          example: [ { "id": 1, "name": "Gluten" }, { "id": 2, "name": "Lactose" } ]
        image:
          type: string
          example: "https://images.matprat.no/nten4ykzxh-jumbotron/large/pastacarbonara0904_1.jpg"
    HouseholdRecipeDTO:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        recipe:
          $ref: '#/components/schemas/RecipeDTO'
        household:
          $ref: '#/components/schemas/Household'
    RecipeIngredientResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        itemType:
          $ref: '#/components/schemas/ItemType'
        amount:
          type: number
          format: double
          example: 1.5
        unit:
          type: string
          example: "pounds"
        householdHasIngredient:
          type: boolean
          example: true